\documentclass{article}
\textwidth 7.5in
\textheight 9.5in
\oddsidemargin -.5in
\evensidemargin -.5in
\topmargin-.75in   
\usepackage{graphics, graphicx, color, xcolor}   
\usepackage{amsmath, amssymb, amsthm} \usepackage{algorithm2e}
\usepackage{comment} 
\usepackage{tikz}
\usepackage{listings}
\usepackage{color}
\newenvironment{solution}
  {\begin{proof}[Solution]}
  {\end{proof}}
 \definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=Python,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}

\begin{document}

\begin{center}
    \large\textbf{Algorithms}\\
    \Large\textbf{Hamming Distance Worksheet}
\end{center}
You are given the following set of binary strings that are 5 bits long.
\begin{verbatim}
    {10110, 11010, 11110, 01110}
\end{verbatim}
\begin{enumerate}
    \item Use the exhaustive approach to find the 5 bit long binary string that minimizes the maximum hamming distance for the given set.
     \newline \newline \newline \newline \newline 
    \newline \newline \newline \newline \newline
    \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline \newline
    \item Use the greedy-heuristic algorithm to approximate the binary string? Are they different, if so what is the hamming distance between the strings generated by the exhaustive and greedy-heuristic approaches
\end{enumerate}


\end{document}
